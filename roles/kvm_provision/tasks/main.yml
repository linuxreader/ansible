#SPDX-License-Identifier: MIT-0
---
- name: Ensure requirements in place
  community.general.rpm_ostree_pkg:
    name:
      - guestfs-tools
      - python3-libvirt
    state: present
#  become: yes

- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create VM if not exists
  block:
  - name: Download base image
    get_url:
      url: "{{ base_image_url }}"
      dest: "/tmp/{{ base_image_name }}"
      checksum: "sha256:{{ base_image_sha }}"
      
  - name: Copy base image to libvirt directory
    copy:
      dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
      src: "/tmp/{{ base_image_name }}"
      force: no
      remote_src: yes 
      mode: 0660
    register: copy_results

  - name: Configure the image
    command: >
      virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2
      --hostname {{ vm_name }}
      --root-password password:{{ vm_root_pass }}
      --uninstall cloud-init --selinux-relabel
      --firstboot-command "nmcli c m eth0 con-name eth0 ip4 {{ ip_addr }}/24 gw4 {{ gw_addr }} ipv4.method manual && nmcli c d eth0 && nmcli c u eth0"
  
  - name: Create the Ansible user 
    command: >
      virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2  
      --run-command 'id {{ ansible_user }} 2>/dev/null || (useradd -m {{ ansible_user }} && echo "{{ ansible_password }}" | passwd --stdin {{ ansible_user }})'
    when: copy_results is changed

  - name: Inject SSH key
    command: >
      virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2
      --ssh-inject {{ ansible_user }}:file:{{ ssh_key }}

  - name: Define vm
    community.libvirt.virt:
      command: define
      xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
    when: "vm_name not in existing_vms.list_vms"

  - name: Ensure VM is started
    community.libvirt.virt:
      name: "{{ vm_name }}"
      state: running
    register: vm_start_results
    until: "vm_start_results is success"
    retries: 15
    delay: 2

  - name: Ensure temporary file is deleted
    file:
      path: "/tmp/{{ base_image_name }}"
      state: absent
    when: cleanup_tmp | bool
